/***************************************************************************
 *   Copyright 2010 by Davide Bettio <davide.bettio@kdemail.net>           *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA .        *
 ***************************************************************************
 *   Name: KOOFCore.h                                                      *
 *   Date: 08/2010                                                         *
 ***************************************************************************/

#ifndef _KOOFCore_H_
#define _KOOFCore_H_

#include <new>
#include <defs.h>

#define foreach (tmp, container, type) \
        for (type::const_iterator foreach_iterator = container.constBegin(); \
             foreach_iterator != container.constEnd(); \
             ++foreach_iterator)

#define NO_HEAP \
    private: \
      void * operator new   (unsigned int); \
      void * operator new[] (unsigned int); \
      void   operator delete   (void *); \
      void   operator delete[] (void*);

template <typename T> inline const T &max(const T &a, const T &b)
{
    return (a < b) ? b : a;
}

template <typename T> inline const T &min(const T &a, const T &b)
{
    return (a < b) ? a : b;
}

template <typename T> inline void swap(T &a, T &b)
{
    T tmp = a;
    a = b;
    b = tmp;
}

#endif
